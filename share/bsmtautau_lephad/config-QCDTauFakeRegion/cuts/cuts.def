# -*- mode: tqfolder -*-

################################################################
##
##  FAKE FACTOR QCD Jet Fake
##
#################################################################

$include("bsmtautau_lephad/config-Common/cuts/cuts.def");



@ */CutMaterialCorrection {
    +CutTruth {
        <.cutExpression="{ $(isData) || $(isSig) || ($(isTTL) && ([TruthTauSelector] == 20 || [TruthTauSelector] == 5 ||[TruthTauSelector] == 30)) || 
         ($(isJFT) && [TruthTauSelector] == -30)}",
         .weightExpression="{$(isData) ? 1 : [ScaleFactor]}", .title="Truth">

        +CutLeptonBasic {
            <.cutExpression="lep_0_p4.Pt() > 30 && lep_0_id_medium ==1", .title = "Lepton basic cut">
        
            +CutTauBasic {
                <.cutExpression="tau_0_p4.Pt() > 25 && fabs(tau_0_p4.Eta()) < 2.3 && 
                    (tau_0_n_charged_tracks == 1 || tau_0_n_charged_tracks == 3)", 
                    .title="Tau basic cut">
                
                +CutLepTau {
                    <.cutExpression="lephad_dphi>2.4", .title="Lephad dphi">

                    +CutLeptonISO {
                        <.cutExpression="$(isFailISO)", .title="Lepton fail isolation">
                    } #End: CutLeptonISO
                } #End: CutLepTau
            } #End: CutTauBasic
        } #End: CutLeptonBasic
    } #End: CutTruth
} #End: CutMaterialCorrection



# Divide to OS/SS region
@ */CutLeptonISO {
    +CutOS {
        <.cutExpression="lephad_qxq == -1", .title="OS", regionCharge="OS">
    } #End: CutOS
    
    +CutSS {
        <.cutExpression="lephad_qxq == 1", .title="SS", regionCharge="SS"> 
    } #End: CutSS
} #End: CutLeptonISO



# Divide to Bveto/Btag region
@ */CutLeptonISO/Cut*S {
    +Cut$(regionCharge)Bveto {
        <.cutExpression="$(NbJets)==0", .title="$(regionCharge)Bveto", regionNbjets="Bveto">
    } #End: Cut[OS/SS]Bveto

    +Cut$(regionCharge)Btag {
        <.cutExpression="$(NbJets)>=1", .title="$(regionCharge)Btag", regionNbjets="Btag">
    } #End: Cut[OS/SS]Btag
} #End: CutLeptonISO/Cut[OS/SS]



# Divide to different MT region
@ */CutLeptonISO/Cut*S/Cut*B* {
    +Cut$(regionCharge)$(regionNbjets)QCDTFR {
        <.cutExpression="lephad_mt_lep0_met <= 40", 
        .title="$(regionCharge)$(regionNbjets)QCDTFR", regionMT="QCDTFR">
    }
}


@ */Cut*S/Cut*B*/Cut*FR {
    +Cut$(regionCharge)$(regionNbjets)$(regionMT)1p {
        <.cutExpression="tau_0_n_charged_tracks == 1", .title="$(regionCharge)$(regionNbjets)$(regionMT)1p", regionProng="1p">
    }
    
    +Cut$(regionCharge)$(regionNbjets)$(regionMT)3p {
        <.cutExpression="tau_0_n_charged_tracks == 3", .title="$(regionCharge)$(regionNbjets)$(regionMT)3p", regionProng="3p">
    }
}



# Divide to PassID/FailID region
@ */Cut*p {
    +Cut$(regionCharge)$(regionNbjets)$(regionMT)$(regionProng)PassTauID {
        <.cutExpression="$(isQCDFakes) ? $(isFailID) : $(isPassID)", 
         .weightExpression="$(isQCDFakes) ? $(applyQCDTFF) : 1",
         .title="$(regionCharge)$(regionNbjets)$(regionMT)$(regionProng)PassTauID">
    }
    
    +Cut$(regionCharge)$(regionNbjets)$(regionMT)$(regionProng)FailTauID {
        <.cutExpression="$(isQCDFakes) ? $(isPassID) : $(isFailID)", 
         .weightExpression="$(isQCDFakes) ? 1 / $(applyQCDTFF) : 1",
         .title="$(regionCharge)$(regionNbjets)$(regionMT)$(regionProng)FailTauID">
    }
}



$replace("*/CutOS/*:*", regionCharge="OS");
$replace("*/CutSS/*:*", regionCharge="SS");
$replace("*/Cut*SBveto/*:*", regionNbjets="Bveto");
$replace("*/Cut*SBtag/*:*", regionNbjets="Btag");
$replace("*/Cut*QCDTFR/*:*", regionMT="QCDTFR");
$replace("*/Cut*1p/*:*", regionProng="1p");
$replace("*/Cut*3p/*:*", regionProng="3p");
