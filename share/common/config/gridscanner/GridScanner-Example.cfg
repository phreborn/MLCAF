# -*- mode: conf -*-
# input file, colon separates sample folder name

# General Options 
# ==========================================

runGridScanner.inputFile:   sampleFolders/analyzed/samples-analyzed-GridScanner-Example.root:samples
runGridScanner.outputFile:  results/GridScanner-Example/gridscanner-example.root

# plot directory
runGridScanner.plotDirectory:   results/GridScanner-Example

# name of the booked multidimensional histogram
# as specified in your multidimensional histogram definition file
runGridScanner.nDimHistName:     GridScan_Example_Hist

# set region (cut) where optimization is done
runGridScanner.simple.regions: CutMll

# PrepareGrid Options 
# ==========================================

# to avoid numerical issues
# with very small background expectations
# we put a lower cutoff for the exp. background
runGridScanner.cutoff:    0.001
# points which will have a lower background value
# will be discarded and not taken into account
# default is zero, e.g. no cutoff
# alternatively or additionally, we can put a cutoff
# on the relative exp. background uncertainty
# that way, we can discard points with low statistics
# or with issues due to negative event weights
# even without placing an explicit cut 
# on the background expectation
runGridScanner.relBkgErrCutoff: 1.0
# now, points where the relative exp. bkg. uncertainty
# exceeds 100% will be discarded

# ScanGrid Options 
# ==========================================

# what channels to scan?
runGridScanner.scanChannels:   [em+me]

# define what to consider as signal and background for grid scan
runGridScanner.simple.signal: /sig/$(LEPCH)/mh125/vbf
runGridScanner.simple.background: /bkg/$(LEPCH)

# selecting the variables for scanning (with their respective aliases)
# ==>> different type of variables
# *variables which are scanned:
#  runGridScanner.variablesUpperScan:  DPhill
#  runGridScanner.variablesLowerScan:  TrackMET
# *variables where cut is switched on and off (notice the quotes which are MANDATORY
# when defining more than one variable as fixed upper/lower):
#  runGridScanner.variablesLowerSwitch: nJet=0.5
#  runGridScanner.variablesUpperSwitch: "nbJets=0.5, nJet=0.5"
# *variables with fixed value (notice the quotes which are MANDATORY
# when defining more than one variable as fixed upper/lower):
#  runGridScanner.variablesLowerFixed: "MaxMTlep=30, ZttVeto=25,TrackMET=20"
#  runGridScanner.variablesUpperFixed: "Mll=55, nbJets=0.5, DPhill=2.4"
# *variables with fixed window cut applied:
#  runGridScanner.variablesWindow: "0.5<nJet<1.5, ..."

#runGridScanner.variablesWindowFixed: "0.5<nJet<1.5, -0.5<nbJets<0.5"
#runGridScanner.variablesWindowFixed: "-0.5<nbJets<0.5"
#runGridScanner.variablesWindowFixed: "-0.5<nJet<0.5, -0.5<nbJets<0.5"
#runGridScanner.variablesLowerFixed: "MaxMTlep=50, ZttVeto=25, TrackMET=20"
#runGridScanner.variablesLowerFixed: "MaxMTlep=50"
#, ZttVeto=25, TrackMET=20"
#runGridScanner.variablesLowerFixed: "DPhillMET=1.57, Ptll=30"

#runGridScanner.variablesUpperScan:  DPhill,Mll
#runGridScanner.variablesLowerScan:  ZttVeto
#runGridScanner.variablesLowerScan:  TrackMET,ZttVeto
#runGridScanner.variablesUpperSwitch: nbJets
#runGridScanner.variablesLowerSwitch:  

# use this option to restrict the scan ranges 
# for some of the variables (prevents from scanning
# not interesting regions)
runGridScanner.boundaryList: common/config/gridscanner/scan-boundaries.txt 

# choosing the significance evaluator
# curent available options: poisson, s/sqrt(b), s/sqrt(s+b)
runGridScanner.evaluator: poisson

# the following options can be used to repeatedly execute
# an external command while running the scan
# this can be useful for extremely long running jobs
# you can e.g. renew kerberos tokens every 24h on lxplus
# the heartbeat command can be an arbitrary shell command
# runGridScanner.heartBeatCommand: kinit -R
# the heartbeat interval is in milliseconds
# the below number corresponds to 23h 50min
# runGridScanner.heartBeatInterval: 85800000
# CURRENTLY NOT IMPLEMENTED

# do you want the scanner to print status updates?
runGridScanner.verbose: true
# do you want tons of output from HistFactory?
runGridScanner.evaluator.verbose: true
# do you want tons of output from the TQSampleDataReader
# collecting your Histograms?
runGridScanner.reader.verbose: true


# SIMPLE significance evaluator options 
# ==========================================

# this will set the axis on which the final significance is calculated,
# i.e where the integral is computed 
runGridScanner.simple.axisToEvaluate: MT

# MakePlots Options 
# ==========================================

# make plots?
runGridScanner.makePlots: true

# draw vertical lines at given X-coordinates
# can be used to denote current baseline cut values
runGridScanner.drawCuts:  "DPhill=1.8, Mll=55"

runGridScanner.plotFormat: png

# the fractions for which histograms should be made
# i.e. "Top x% of Cut Configurations"
# runGridScanner.cutTopFractions: 0.01, 0.02, 0.05, 0.1, 0.5
# the top numbers for which histograms should be made
# ie.e "Top N Cut Configurations"
# runGridScanner.cutTopNumbers:   20, 50, 100
# the fractions for which significance profiles should be made
runGridScanner.sigTopFractions: 0.01, 0.02, 0.05
# the top numbers for which significance profiles should be made
#runGridScanner.sigTopNumbers:   20, 50, 100

# the desired titles of the plots
# can be anything that is accepted by TH1*::SetTitle()
# variable titles can be referenced as 
#   $(VAR) in a 1D-case
runGridScanner.plotTitle: $(VAR)
#   $(VARX) and $(VARY) in a 2D-case
runGridScanner.plotTitle2D: $(VARY) vs. $(VARX)

# minimum significance value for significance profile plots
runGridScanner.plotMinSignificance: 0.
